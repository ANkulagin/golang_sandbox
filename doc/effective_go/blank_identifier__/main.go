package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	_ "net/http/pprof" // –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
	"os"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ json.Marshaler
type RawMessage struct {
	Message string `json:"message"`
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ MarshalJSON –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ json.Marshaler
func (rm *RawMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(map[string]string{
		"message": rm.Message,
	})
}

func main() {

	// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ json.Marshaler
	rm := &RawMessage{Message: "Hello, Go!"}
	if _, ok := interface{}(rm).(json.Marshaler); ok {
		fmt.Printf("–¢–∏–ø *RawMessage —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å json.Marshaler\n")
	} else {
		fmt.Printf("–¢–∏–ø *RawMessage –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å json.Marshaler\n")
	}
	// üìå –ü—Ä–∏–º–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É—Å—Ç–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏
	path := "doc/effective_go/blank_identifier__/test.go"
	if _, err := os.Stat(path); os.IsNotExist(err) {
		fmt.Printf("%s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n", path)
	}

	// ‚ùå –ü—Ä–∏–º–µ—Ä –ø–ª–æ—Ö–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ (–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫)
	// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–¥–∞—ë—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –æ—à–∏–±–∫–µ.
	fi, _ := os.Stat(path)
	if fi != nil && fi.IsDir() {
		fmt.Printf("%s ‚Äî —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è\n", path)
	}

	// ‚ö†Ô∏è –†–∞–±–æ—Ç–∞ —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
	var _ = fmt.Printf // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞ fmt
	var _ io.Reader    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞ io

	fd, err := os.Open("test.go")
	if err != nil {
		log.Fatal(err)
	}
	_ = fd // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

	// üîÑ –ò–º–ø–æ—Ä—Ç —Å –ø–æ–±–æ—á–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
	// net/http/pprof —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ HTTP –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
	fmt.Println("\n–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞ –ø–æ—Ä—Ç—É 6060)")
	go func() {
		log.Println(http.ListenAndServe("localhost:6060", nil))
	}()

	// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ json.Marshaler
	jsonData, err := json.Marshal(rm)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("JSON:", string(jsonData))

	// üìå –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤ for range
	data := []int{1, 2, 3, 4, 5}
	fmt.Println("\n–ü–µ—Ä–µ–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É—Å—Ç–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞:")
	for _, value := range data {
		fmt.Println("–ó–Ω–∞—á–µ–Ω–∏–µ:", value)
	}

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
	fmt.Println("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
	var input string
	fmt.Scanln(&input)
}
